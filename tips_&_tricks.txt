# When dealing with Booleans it is better to use the whole conditions than using True and False

# Can use dictionary to deal with codechef problems where you need to compare entities- 
For example- Green>Blue>Brown gene order and choosing the better gene in every 2 parents can be dealt with using-
x = {'Green':1,'Blue':0,'Brown': -1}

#For movement questions- a distance forward in one step and b distance backward in one step:
Can use (a-b)*(k/2) + (a-b)*(k%2) total distance travelled in k steps

#When looking at festival holidays, used this code for tackling unrequired date numbers:
i=int(input())
for j in range(i):
    k = int(input())
    c = 8
    for m in input().split():
        if not((int(m)%7 == 6)) and not((int(m)%7 == 0)):
            c = c + 1
    print(c)
    
#For reading inputs without explicitly mentioning- used a counter- but it threw an error:
i = int(input())
for j in range(i):
    a = 0
    b = 0
    c = 0
    for m in input().split():
        if c%2 == 0:
            a += int(m)
        else:
            b += int(m)
        c+=1
    if a>b:
        print(1)
    else:
        print(2)

#When asked for lowest nearest integer use p//q:
i = int(input())
for j in range(i):
    h,x,y,c = map(int,input().split())
    if h*(x + (y//2)) <= c:
        print('YES')
    else:
        print('NO')
        
#Place where I had to include a "=" sign to pass the test cases- Maximum possible sum for 2 nums out of 3
i =int(input())
for j in range(i):
    a,b,c = map(int,input().split())
    if (c <= a) and (c <= b):
        print (a + b)
    elif (b <= a) and (b <= c):
        print (a + c)
    else:
        print (b + c)
        
#For accessing elements in a string till end use:
for x in given_string:
    print(x)

#In case of list index out of range- check if you are reading all input().split() correctly even if you do not require them
No need to save them as a variable also


##### Arrays ######
#Way to get number of occurences of categories- "M" and "F"
i = int(input())
for j in range(i):
    l = int(input())
    c = 0
    for k in input().split():
        if k[0] == 'M':
            c +=1
        else:
            c -=1
    print(str(int((l+c)/2)) + " " + str(int((l-c)/2)))

#Can edit the following code for getting numbers ending in 2,3 or 9 between 2 numbers- currently throwing error
i = int(input())
for j in range(i):
    l,r = map(int,input().split())
    qd = (r//10)-(l//10)
    c = qd*3
    d = r-l+1-((qd)*10)
    if d > 0:
        for k in range(l%10,(d+1)):
            if k in [2,3,9]:
                c +=1
    print(c)

#Very specific program for checking palindrome for all integers
#2 THINGS TO TAKE CARE OF-
    #Usage of break
    #Considering default as win( Can be used when sure of cases like single degrees are all palindromes)

i = int(input())
for j in range(i):
    k = input()
    m = (len(k))//2
    r = 'wins'
    for l in range(m):
        if (k[l] != k[-1-l]):
            r = 'loses'
            break;
    print(r)

#Can be used for COLD START in bytestream data-
    #Check usage of a=-1
i = int(input())
for j in range(i):
    n = int(input())
    a=-1
    c=0
    for m in input().split():
        if int(m)==a:
            c += 1
        a = int(m)
    print(n-c)

####Math ####

For maximum number of products which can be bought with denominations 5 and 10:
#Check the usage of quotient and remainder- Division is by the price of 1 product
i = int(input())
for j in range(i):
    n,m,o = map(int,input().split())
    print(((10*m)//o) + ((((10*m)%o) + (5*n))//o))

#When we know that an event can happen every n seconds, the maximum number of events in time t will be:
### (t//n) + 1

#Finding remainder- Usage of while condition
i = int(input())
for j in range(i):
    n,m = map(int,input().split())
    while not(n < m):
        n = n - m
    print(n)
